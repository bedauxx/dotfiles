"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var createDocComment_1 = __importDefault(require("./createDocComment"));
var genReqBody = function (_a, importName, index) {
    var _b, _c, _d;
    var name = _a.name, props = _a.props;
    return ((_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].reqBody) ? " body" + (((_d = (_c = props.polymorph) === null || _c === void 0 ? void 0 : _c[index].reqBody) === null || _d === void 0 ? void 0 : _d.hasQuestion) ? '?' : '') + ": " + importName + "['" + name + "']['polymorph'][" + index + "]['reqBody'],"
        : props.reqBody
            ? " body" + (props.reqBody.hasQuestion ? '?' : '') + ": " + importName + "['" + name + "']['reqBody'],"
            : '';
};
var genQuery = function (_a, importName, index) {
    var _b, _c, _d;
    var name = _a.name, props = _a.props;
    return ((_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].query) ? " query" + (((_d = (_c = props.polymorph) === null || _c === void 0 ? void 0 : _c[index].query) === null || _d === void 0 ? void 0 : _d.hasQuestion) ? '?' : '') + ": " + importName + "['" + name + "']['polymorph'][" + index + "]['query'],"
        : props.query
            ? " query" + (props.query.hasQuestion ? '?' : '') + ": " + importName + "['" + name + "']['query'],"
            : '';
};
var genReqHeaders = function (_a, importName, index) {
    var _b, _c, _d;
    var name = _a.name, props = _a.props;
    return ((_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].reqHeaders) ? " headers" + (((_d = (_c = props.polymorph) === null || _c === void 0 ? void 0 : _c[index].reqHeaders) === null || _d === void 0 ? void 0 : _d.hasQuestion) ? '?' : '') + ": " + importName + "['" + name + "']['polymorph'][" + index + "]['reqHeaders'],"
        : props.reqHeaders
            ? " headers" + (props.reqHeaders.hasQuestion ? '?' : '') + ": " + importName + "['" + name + "']['reqHeaders'],"
            : '';
};
var genOption = function (method, importName, index) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (index === void 0) { index = 0; }
    var poly = (_a = method.props.polymorph) === null || _a === void 0 ? void 0 : _a[index];
    var isOptionRequired = ((_b = method.props.query) === null || _b === void 0 ? void 0 : _b.hasQuestion) === false ||
        ((_c = method.props.reqBody) === null || _c === void 0 ? void 0 : _c.hasQuestion) === false ||
        ((_d = method.props.reqHeaders) === null || _d === void 0 ? void 0 : _d.hasQuestion) === false ||
        (poly &&
            (((_e = poly.query) === null || _e === void 0 ? void 0 : _e.hasQuestion) === false ||
                ((_f = poly.reqBody) === null || _f === void 0 ? void 0 : _f.hasQuestion) === false ||
                ((_g = poly.reqHeaders) === null || _g === void 0 ? void 0 : _g.hasQuestion) === false));
    return "(option" + (isOptionRequired ? '' : '?') + ": {" + genReqBody(method, importName, index) + genQuery(method, importName, index) + genReqHeaders(method, importName, index) + " config?: T })";
};
var genResBody = function (_a, importName) {
    var name = _a.name, props = _a.props;
    return props.resBody ? importName + "['" + name + "']['resBody']" : 'void';
};
var genPolyResBody = function (_a, importName, index) {
    var _b;
    var name = _a.name, props = _a.props;
    return ((_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].resBody) ? importName + "['" + name + "']['polymorph'][" + index + "]['resBody']"
        : genResBody({ name: name, props: props }, importName);
};
var genResHeaders = function (_a, importName) {
    var name = _a.name, props = _a.props;
    return props.resHeaders ? importName + "['" + name + "']['resHeaders']" : 'BasicHeaders';
};
var genPolyResHeaders = function (_a, importName, index) {
    var _b;
    var name = _a.name, props = _a.props;
    return ((_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].resHeaders) ? importName + "['" + name + "']['polymorph'][" + index + "]['resHeaders']"
        : genResHeaders({ name: name, props: props }, importName);
};
var genStatus = function (_a, importName) {
    var name = _a.name, props = _a.props;
    return props.status ? ", " + importName + "['" + name + "']['status']" : '';
};
var genPolyStatus = function (_a, importName, index) {
    var _b;
    var name = _a.name, props = _a.props;
    return ((_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].status) ? ", " + importName + "['" + name + "']['polymorph'][" + index + "]['status']"
        : genStatus({ name: name, props: props }, importName);
};
var genRequest = function (props) {
    return ", option" + (!props.reqBody
        ? ''
        : props.reqFormat
            ? ", '" + props.reqFormat.value + "'"
            : props.reqBody && /^(ArrayBuffer|Blob|string)$/.test(props.reqBody.value)
                ? ", '" + props.reqBody.value + "'"
                : '');
};
var genResMethodName = function (props) {
    return !props.resBody
        ? 'send'
        : { ArrayBuffer: 'arrayBuffer', Blob: 'blob', string: 'text', FormData: 'formData' }[props.resBody.value] || 'json';
};
var genReturnVal = function (method, importName, path) {
    return "fetch<" + genResBody(method, importName) + ", " + genResHeaders(method, importName) + genStatus(method, importName) + ">(prefix, " + path + ", " + method.name.toUpperCase() + genRequest(method.props) + ")." + genResMethodName(method.props) + "()";
};
var genPolyType = function (method, importName, index) {
    return "Promise<AspidaResponse<" + genPolyResBody(method, importName, index) + ", " + genPolyResHeaders(method, importName, index) + genPolyStatus(method, importName, index) + ">>";
};
var genPolymorphReturnVal = function (method, indent, path) {
    var _a, _b;
    return method.name + "Request(option: any) {\n" + indent + "      return fetch(prefix, " + path + ", " + method.name.toUpperCase() + genRequest(__assign(__assign({}, method.props), (_a = method.props.polymorph) === null || _a === void 0 ? void 0 : _a.find(function (p) { return p.reqBody; }))) + ")." + genResMethodName(__assign(__assign({}, method.props), (_b = method.props.polymorph) === null || _b === void 0 ? void 0 : _b.find(function (p) { return p.reqBody; }))) + "()";
};
exports.default = (function (methods, indent, importName, path) {
    return __spread(methods.map(function (method) {
        var _a;
        var name = method.name, props = method.props, doc = method.doc;
        if ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a.length) {
            var polys = props.polymorph.map(function (_, i) { return [
                indent + "    function " + name + "Request" + genOption(method, importName, i) + ": " + genPolyType(method, importName, i),
                indent + "    function $" + name + "Request" + genOption(method, importName, i) + ": Promise<" + genPolyResBody(method, importName, i) + ">"
            ]; });
            return indent + "  " + name + ": (() => {\n" + polys
                .map(function (_a) {
                var _b = __read(_a, 1), a = _b[0];
                return a;
            })
                .join('\n') + "\n" + indent + "    function " + genPolymorphReturnVal(method, indent, path) + "\n" + indent + "    }\n" + indent + "    return " + name + "Request\n" + indent + "  })(),\n" + indent + "  $" + name + ": (() => {\n" + polys
                .map(function (_a) {
                var _b = __read(_a, 2), b = _b[1];
                return b;
            })
                .join('\n') + "\n" + indent + "    function $" + genPolymorphReturnVal(method, indent, path) + ".then(r => r.body)\n" + indent + "    }\n" + indent + "    return $" + name + "Request\n" + indent + "  })()";
        }
        var tmpChanks = [
            genOption(method, importName) + " =>",
            genReturnVal(method, importName, path)
        ];
        return "" + createDocComment_1.default(indent + "  ", doc, props) + indent + "  " + name + ": " + tmpChanks[0] + "\n" + indent + "    " + tmpChanks[1] + ",\n" + createDocComment_1.default(indent + "  ", doc, props) + indent + "  $" + name + ": " + tmpChanks[0] + "\n" + indent + "    " + tmpChanks[1] + ".then(r => r.body)";
    }), [
        methods.filter(function (_a) {
            var props = _a.props;
            return props.query;
        }).length
            ? indent + "  $path: (option?: " + methods
                .filter(function (_a) {
                var props = _a.props;
                return props.query;
            })
                .map(function (_a) {
                var name = _a.name;
                return "{ method" + (name === 'get' ? '?' : '') + ": '" + name + "'; query: " + importName + "['" + name + "']['query'] }";
            })
                .join(' | ') + ") =>\n" + indent + "    `${prefix}${" + (path.startsWith('`') ? path.slice(3, -2) : path) + "}${option && option.query ? `?${dataToURLString(option.query)}` : ''}`"
            : indent + "  $path: () => `${prefix}${" + (path.startsWith('`') ? path.slice(3, -2) : path) + "}`"
    ]).join(',\n')
        .replace(/, BasicHeaders>/g, '>')
        .replace(/fetch<void>/g, 'fetch')
        .replace(/AspidaResponse<void>/g, 'AspidaResponse');
});
//# sourceMappingURL=createMethodsString.js.map