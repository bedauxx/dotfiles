"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var createTemplateValues_1 = __importDefault(require("./createTemplateValues"));
var createDocComment_1 = __importDefault(require("./createDocComment"));
var getDirentTree_1 = require("./getDirentTree");
var listNotIndexFiles = function (tree) { return __spread(tree.children
    .filter(function (c) { return !c.name.startsWith('_') && !c.isDir && c.name !== 'index.ts'; })
    .map(function (c) {
    return tree.path + "/\u001B[31m" + c.name + "\u001B[0m -> \u001B[32m" + c.name.replace('.ts', '') + "/index.ts\u001B[0m";
}), tree.children
    .map(function (c) { return (!c.name.startsWith('_') && c.isDir ? listNotIndexFiles(c.tree) : []); })
    .reduce(function (p, c) { return __spread(p, c); }, [])); };
var createTemplate = function (tree, baseURL, trailingSlash, basePath) {
    var _a;
    var _b = createTemplateValues_1.default(tree, basePath, trailingSlash), api = _b.api, imports = _b.imports, pathes = _b.pathes;
    var text = ("/* eslint-disable */\nimport { AspidaClient" + (api.includes('AspidaResponse') ? ', AspidaResponse' : '') + (api.includes('BasicHeaders') ? ', BasicHeaders' : '') + (api.includes('dataToURLString') ? ', dataToURLString' : '') + " } from 'aspida'\n<% imports %>\n\n" + createDocComment_1.default('', (_a = tree.children.find(function (c) { return !c.isDir && c.name === 'index.ts'; })) === null || _a === void 0 ? void 0 : _a.doc) + "const api = <T>({ baseURL, fetch }: AspidaClient<T>) => {\n  const prefix = (baseURL === undefined ? '<% baseURL %>' : baseURL).replace(/\\/$/, '')\n" + pathes.map(function (p, i) { return "  const PATH" + i + " = " + p; }).join('\n') + "\n" + ['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'PATCH', 'OPTIONS']
        .filter(function (m) { return api.includes(", " + m + ", option"); })
        .map(function (m) { return "  const " + m + " = '" + m + "'"; })
        .join('\n') + "\n\n  return <% api %>\n}\n\nexport type ApiInstance = ReturnType<typeof api>\nexport default api\n")
        .replace('<% imports %>', imports.join('\n'))
        .replace('<% api %>', api)
        .replace('<% baseURL %>', baseURL);
    return { text: text, filePath: path_1.default.posix.join(tree.path, '$api.ts') };
};
exports.default = (function (_a) {
    var input = _a.input, baseURL = _a.baseURL, trailingSlash = _a.trailingSlash, outputEachDir = _a.outputEachDir;
    var direntTree = getDirentTree_1.getDirentTree(input);
    var templates = [createTemplate(direntTree, baseURL, trailingSlash, '')];
    if (outputEachDir) {
        var notIndexFiles = listNotIndexFiles(direntTree);
        if (notIndexFiles.length) {
            console.log("aspida \u001B[43m\u001B[31mERROR\u001B[0m Since true is specified in outputEachDir at aspida.config.js, you need to rename the following files\n  " + notIndexFiles.join('\n  '));
            return [];
        }
        var appendTemplate_1 = function (tree) {
            tree.children.forEach(function (c) {
                if (!c.isDir || c.name.startsWith('_'))
                    return;
                templates.push(createTemplate(c.tree, baseURL, trailingSlash, c.tree.path.replace(input, '')));
                appendTemplate_1(c.tree);
            });
        };
        appendTemplate_1(direntTree);
    }
    return templates;
});
//# sourceMappingURL=buildTemplate.js.map