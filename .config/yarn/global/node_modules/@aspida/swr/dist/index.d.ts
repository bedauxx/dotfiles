import { responseInterface, ConfigInterface } from 'swr';
declare type Options<T extends (option: any) => Promise<any>> = Parameters<Parameters<T> extends [Parameters<T>[0]] ? (option: Parameters<T>[0] & ConfigInterface<ReturnType<T> extends Promise<infer S> ? S : never>) => void : (option?: Parameters<T>[0] & ConfigInterface<ReturnType<T> extends Promise<infer S> ? S : never>) => void>;
declare type Res<T extends (option: any) => Promise<any>> = responseInterface<ReturnType<T> extends Promise<infer S> ? S : never, any>;
declare function useAspidaSWR<T extends Record<string, any> & {
    $get: (option: any) => Promise<any>;
    $path: (option?: any) => string;
}>(api: T, ...option: Options<T['$get']>): Res<T['$get']>;
declare function useAspidaSWR<T extends Record<string, any> & {
    $path: (option?: any) => string;
}, U extends {
    [K in keyof T]: T[K] extends (option: any) => Promise<any> ? K : never;
}[keyof T]>(api: T, key: U, ...option: Options<T[U]>): Res<T[U]>;
export default useAspidaSWR;
//# sourceMappingURL=index.d.ts.map